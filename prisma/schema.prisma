// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Role          Role[]
  Passwd        Passwd?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Passwd {
  id        String   @id @unique @default(uuid())
  shadow    String?  @db.Text
  userId    String   @unique(map: "PasswdUserId")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Role {
  id        String   @id @unique @default(uuid())
  role      String   @unique @db.Text
  User      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
}

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model Account {
//   id                 String    @id @default(uuid())
//   userId             String
//   providerType       String
//   providerId         String
//   providerAccountId  String
//   refreshToken       String?
//   accessToken        String?
//   accessTokenExpires DateTime?
//   createdAt          DateTime  @default(now())
//   updatedAt          DateTime  @updatedAt
//   user               User      @relation(fields: [userId], references: [id])

//   @@unique([providerId, providerAccountId])
// }

// model Session {
//   id           String   @id @default(uuid())
//   userId       String
//   expires      DateTime
//   sessionToken String   @unique
//   accessToken  String   @unique
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User     @relation(fields: [userId], references: [id])
// }

// model User {
//   id            String       @id @default(uuid())
//   name          String?
//   email         String?      @unique
//   emailVerified DateTime?
//   image         String?
//   createdAt     DateTime     @default(now())
//   updatedAt     DateTime     @updatedAt
//   accounts      Account[]
//   sessions      Session[]
//   Role          Role[]
//   Passwd        Passwd?
//   ProfileUser   ProfileUser?
// }

// model VerificationRequest {
//   id         String   @id @default(uuid())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@unique([identifier, token])
// }

// model Role {
//   id     String  @id @unique @default(uuid())
//   role   String  @unique @db.Text
//   User   User?   @relation(fields: [userId], references: [id])
//   userId String?
// }

// model Passwd {
//   id     String  @id @unique @default(uuid())
//   shadow String? @db.Text
//   userId String  @unique(map: "PasswdUserId")
//   user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
// }

// model ProfileUser {
//   id     String  @id @unique @default(uuid())
//   bio    String? @db.Text
//   userId String  @unique(map: "ProfileUserId")
//   user   User    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Profile_1")
// }
